AWSTemplateFormatVersion: "2010-09-09"
Description: CF template with resources needed to deploy contanerized Flask
Parameters:
  Domain:
    Type: String

Resources:
  Repository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Ref Domain
      RepositoryPolicyText:
        Statement:
          - Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
            Effect: Allow
            Principal:
              AWS: "*"
              Service: codebuild.amazonaws.com
        Version: '2008-10-17'


  LogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Retain
    Properties:
      RetentionInDays: 60

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.192.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: "10.192.10.0/24"
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: "10.192.11.0/24"
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: "10.192.20.0/24"
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: "10.192.21.0/24"
      MapPublicIpOnLaunch: false

  NatGateway1EIP:
    Type: "AWS::EC2::EIP"
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: "AWS::EC2::EIP"
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  LoadBalancerSecurityGroup:
    Properties:
      GroupDescription: Allow HTTP/HTTPS from anywhere
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: "-1"
          IpProtocol: "-1"
          ToPort: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: 0.0.0.0/0
          FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup

  ContainerSecurityGroup:
    Properties:
      GroupDescription: Allow HTTP from Load Balancer
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: "-1"
          IpProtocol: "-1"
          ToPort: "-1"
      SecurityGroupIngress:
        - FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup


  HostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: "hosted zone for my domain"
      Name: !Ref Domain

  DNS:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'LoadBalancer.DNSName'
        HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
      HostedZoneId: !Ref HostedZone
      Name: !Ref Domain
      Type: A

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]


  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn: LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: "/health_check"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      UnhealthyThresholdCount: 3
      TargetType: 'ip'
      VpcId: !Ref VPC

  Cluster:
    Type: "AWS::ECS::Cluster"

  TaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

Outputs:
  FlaskDomain:
    Description: Flask domain name
    Value: !Ref Domain
    Export:
      Name: FlaskDomain
  FlaskLogGroup:
    Description: Flask logs
    Value: !Ref LogGroup
    Export:
      Name: FlaskLogGroup
  FlaskContainerSecurityGroup:
    Description: Flask container securoty group
    Value: !Ref ContainerSecurityGroup
    Export:
      Name: FlaskContainerSecurityGroup
  FlaskPrivateSubnets:
    Description: Flask logs
    Value: !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: FlaskPrivateSubnets
  FlaskTargetGroup:
    Description: Flask target group
    Value: !Ref TargetGroup
    Export:
      Name: FlaskTargetGroup
  FlaskVPC:
    Description: Flask VPC
    Value: !Ref VPC
    Export:
      Name: FlaskVPC
  FlaskCluster:
    Description: Flask cluster
    Value: !Ref Cluster
    Export:
      Name: FlaskCluster
  FlaskTaskExecutionRole:
    Description: Flask task execution role
    Value: !Ref TaskExecutionRole
    Export:
      Name: FlaskTaskExecutionRole
